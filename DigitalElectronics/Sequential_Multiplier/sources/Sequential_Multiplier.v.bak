module Sequential_Multiplier #(parameter LENGTH = 5)(
    input start, clock, reset,
    input [LENGTH:0]multiplier, 
    input [LENGTH:0]multiplicand,
    // output ready,
    //Product will be displayed on seven segment displays.
    output seg_a_disp0, seg_b_disp0, seg_c_disp0, seg_d_disp0, seg_e_disp0, seg_f_disp0, seg_g_disp0,
    output seg_a_disp1, seg_b_disp1, seg_c_disp1, seg_d_disp1, seg_e_disp1, seg_f_disp1, seg_g_disp1,
    output seg_a_disp2, seg_b_disp2, seg_c_disp2, seg_d_disp2, seg_e_disp2, seg_f_disp2, seg_g_disp2
    );

    wire [LENGTH-1:0]multiplierRegister;
    wire [LENGTH-1:0]multiplicandRegister;

    //Result
    wire [LENGTH-1*2:0]productRegisterIn;
    wire [LENGTH-1*2:0]productRegisterOut;

    // BDC variables outputs
    wire [3:0] unos;
    wire [3:0] dieces;
    wire [3:0] cientos;

register #(.LENGTH(LENGTH)) registerMultiplier_TOP(
    .clock(clock),
    .reset(reset),
    .enable(start),
    .D(multiplier),
    .Q(multiplierRegister)
    );

register #(.LENGTH(LENGTH)) registerMultiplicand_TOP(
    .clock(clock),
    .reset(reset),
    .enable(start),
    .D(multiplicand),
    .Q(multiplicandRegister)
    );

array_multiplier #(.width(LENGTH)) array_multiplier_TOP(
    .a(multiplierRegister),
    .b(multiplicandRegister),
    .y(productRegisterIn)
    );

register #(.LENGTH(LENGTH)) registerResult_TOP(
    .clock(clock),
    .reset(reset),
    .enable(start),
    .D(productRegisterIn),  //this should be provied by secuential multiplier (ready result) module
    .Q(productRegisterOut)
    );

BinaryToBCD BinaryToBCD_TOP(
    .clk(clock),
    .binario(productRegisterOut),
    .unos(unos),
	.dieces(dieces),
	.cientos(cientos)
    );

BinaryToHexadecimal BinaryToHexadecimal_display0_TOP(
    .control(1'b1),
	.arithmetic_w(unos[3]),
	.arithmetic_x(unos[2]),
	.arithmetic_y(unos[1]),
	.arithmetic_z(unos[0]),
    .seg_a(seg_a_disp0),
    .seg_b(seg_b_disp0),
    .seg_c(seg_c_disp0),
    .seg_d(seg_d_disp0),
    .seg_e(seg_e_disp0),
    .seg_f(seg_f_disp0),
    .seg_g(seg_g_disp0)
    );

//Pasamos nuestros resultados al modulo BinaryToHexadecimal para poder enviar la salida a los displays de 7 segmentos
BinaryToHexadecimal BinaryToHexadecimal_display1_TOP(
    .control(1'b1),
	.arithmetic_w(dieces[3]),
	.arithmetic_x(dieces[2]),
	.arithmetic_y(dieces[1]),
	.arithmetic_z(dieces[0]),
    .seg_a(seg_a_disp1),
    .seg_b(seg_b_disp1),
    .seg_c(seg_c_disp1),
    .seg_d(seg_d_disp1),
    .seg_e(seg_e_disp1),
    .seg_f(seg_f_disp1),
    .seg_g(seg_g_disp1)
    );
	 
//Pasamos nuestros resultados al modulo BinaryToHexadecimal para poder enviar la salida a los displays de 7 segmentos
BinaryToHexadecimal BinaryToHexadecimal_display2_TOP(
    .control(1'b1),
	.arithmetic_w(cientos[3]),
	.arithmetic_x(cientos[2]),
	.arithmetic_y(cientos[1]),
	.arithmetic_z(cientos[0]),
    .seg_a(seg_a_disp2),
    .seg_b(seg_b_disp2),
    .seg_c(seg_c_disp2),
    .seg_d(seg_d_disp2),
    .seg_e(seg_e_disp2),
    .seg_f(seg_f_disp2),
    .seg_g(seg_g_disp2)
    );
	 
endmodule